#parse("definitions.vm")
import org.jetbrains.research.kex.smt.${solver.toLowerCase()}.${solver}SMTExprFactory
import org.jetbrains.research.kfg.ir.Class
import org.jetbrains.research.kfg.type.ClassType
import org.jetbrains.research.kfg.type.TypeFactory

typealias Bool_ = $Bool
typealias Ptr_ = $Bitvector32
typealias Byte_ = $Bitvector32
typealias Short_ = $Bitvector32
typealias Char_ = $Bitvector32
typealias Int_ = $Bitvector32
typealias Long_ = $Bitvector64
typealias Float_ = $Float
typealias Double_ = $Double
typealias Word_ = $Bitvector32
typealias DWord_ = $Bitvector64
typealias Memory_ = $Memory< Ptr_, Word_ >
typealias Function_ = $Function
typealias Dynamic_ = $valexpr

enum class TypeSize (val int: Int) {
    WORD(1), DWORD(2);
}

class $factory : ${solver}SMTExprFactory() {
    companion object {

        fun getTypeSize(type: KexType) = when (type.bitsize) {
            KexType.WORD -> TypeSize.WORD
            KexType.DWORD -> TypeSize.DWORD
            else -> unreachable { log.error("Unknown type bitsize ${type.bitsize}") }
        }
    }

    val ctx = $context()
    val subtypeFunction = Function_(ctx, "isSubtype", listOf(Int_.getStaticSort(ctx), Int_.getStaticSort(ctx)), Bool_.getStaticSort(ctx))
    val typeMap: Map< KexType, Int_ > get() = innerTypeMap
    private val innerTypeMap = mutableMapOf< KexType, Int_ >()

#macro(generateMakes $type $basetype)
    #set($underlined = "${type}_")
    fun make$type(name: String, fresh: Boolean = false) =
            if (fresh) ${underlined}.makeFreshVar(ctx, name) else ${underlined}.makeVar(ctx, name)
    fun make${type}Const(value: $basetype) = ${underlined}.makeConst(ctx, value)
#end

#generateMakes("Ptr" "Int")
    fun makeNull() = makePtrConst(0)

#generateMakes("Bool", "Boolean")
    fun makeTrue() = makeBoolConst(true)
    fun makeFalse() = makeBoolConst(false)

#generateMakes("Byte", "Int")
    fun makeByteConst(value: Byte) = makeByteConst(value.toInt())
#generateMakes("Short", "Int")
    fun makeShortConst(value: Short) = makeShortConst(value.toInt())
#generateMakes("Char", "Int")
    fun makeCharConst(value: Char) = makeCharConst(value.toInt())

#generateMakes("Int", "Int")

#generateMakes("Long", "Long")

#generateMakes("Float", "Float")

#generateMakes("Double", "Double")

    inline fun < reified  Element: $Bitvector > makeEmptyMemory(id: String) = Memory_.makeFree< Ptr_, Element >(ctx, id)
    //            makeDefaultMemory(id, 0xFF)
    inline fun < reified  Element: $Bitvector > makeDefaultMemory(id: String, default: Int) =
        Memory_.makeDefault< Ptr_, Element >(ctx, id, bvMakeConst< Element >(ctx, default) as Element)

#set($types = ["Bool", "Byte", "Short", "Char", "Int", "Long", "Float", "Double"])
    fun getVarByTypeAndName(type: KexType, name: String, fresh: Boolean = false) = when(type) {
#foreach($type in $types)
        is Kex${type} -> make${type}(name, fresh)
#end
        is KexClass -> makePtr(name, fresh)
        is KexArray -> makePtr(name, fresh)
        is KexNull -> makePtr(name, fresh)
        else -> unreachable { log.error("Unknown type in ExprFactory: ${ type }") }
    }

    // fucked up but it's the easiest way to ignore memspace
    fun getTypeVariable(tf: TypeFactory, type: KexType) = innerTypeMap.getOrPut(type.getKfgType(tf).kexType) {
        makeInt(type.toString(), true)
    }

    fun buildSubtypeAxioms(tf: TypeFactory): Bool_ {
        val types = innerTypeMap.mapKeys { it.key.getKfgType(tf) }
        var result = makeTrue()
        for ((type1, val1) in types) {
            for ((type2, val2) in types) {
                val isSubtype = makeBoolConst(type1.isSubtypeOf(type2))
                result = result and (subtypeFunction.applyAs< Bool_ >(val1, val2) eq isSubtype)
            }
        }
        return result
    }

    inline fun < T : Dynamic_, reified U : Dynamic_ > switch(value: T, cases: Map< T, U >, default: U) =
        cases.toList().fold(default) { acc, pair -> `if`(value eq pair.first).then(pair.second).`else`(acc) }

    inline fun < reified U : Dynamic_ > switch(cases: Map< Bool_, U >, default: U) =
        cases.toList().fold(default) { acc, pair -> `if`(pair.first).then(pair.second).`else`(acc) }

    inline fun < reified U : Dynamic_ > if_(cond: Bool_) = `if`(cond)

    fun forAll(sortGen: () -> List< Dynamic_ >, func: (List< Dynamic_ >) -> Bool_): Bool_ = forall(ctx, sortGen, func)

    fun forAll(sortGen: () -> List< Dynamic_ >, func: (List< Dynamic_ >) -> Bool_, patternGenerator: (List< Dynamic_ >) -> List< Dynamic_ >): Bool_ =
        forall(ctx, sortGen, func, patternGenerator)
}
